组件名称,数据类型,输入位宽,输出位宽,处理位宽,内存位宽,说明
Blake2Generator,伪随机数生成器,0-480,8/32,512,512,密钥扩展为随机数流
Blake2Generator.构造函数,初始化,0-480,512,512,64,密钥和nonce处理
Blake2Generator.getByte,字节生成,0,8,64,0,单字节随机数输出
Blake2Generator.getUInt32,整数生成,0,32,64,0,32位随机数组装
Blake2Generator.checkData,缓冲刷新,64,512,512,512,缓冲区管理和刷新
SuperscalarInstruction,指令对象,36,64,64,0,完整指令编码
SuperscalarInstruction.opcode,操作码,8,8,8,0,指令类型标识
SuperscalarInstruction.dst,目标寄存器,4,4,4,0,R0-R7寄存器选择
SuperscalarInstruction.src,源寄存器,4,4,4,0,R0-R7寄存器选择
SuperscalarInstruction.mod,修饰符,8,8,8,0,移位量和标志位
SuperscalarInstruction.imm32,立即数,32,32,32,0,常量或地址偏移
RegisterInfo,寄存器状态,32,104,104,0,单个寄存器状态跟踪
RegisterInfo.latency,延迟计数,32,32,32,0,指令完成时间
RegisterInfo.lastOpGroup,操作组,8,8,8,0,最后执行的指令类型
RegisterInfo.lastOpPar,操作参数,32,32,32,0,指令相关参数
RegisterInfo.value,寄存器值,32,32,32,0,模拟寄存器内容
RegisterInfo[8],寄存器阵列,256,832,832,0,8个寄存器完整状态
ExecutionPort,执行端口,2,2,2,0,单端口状态(P0/P1/P5)
ExecutionPort[170][3],端口矩阵,1020,1020,1020,1020,完整端口占用图
DecoderBuffer,解码器配置,0,256,256,1536,6种解码配置
SuperscalarProgram,完整程序,28608,29000,29000,28608,程序和元数据
generateSuperscalar,主生成函数,480,233600,995000,58000,8个程序生成
scheduleMop,端口调度,1084,32,1020,0,微操作调度算法
selectRegister,寄存器分配,840,4,832,0,寄存器选择算法
calculatePerformanceMetrics,性能分析,28608,400,29000,0,IPC和延迟计算
buildReciprocalCache,倒数缓存,1440,2880,2880,2880,IMUL_RCP优化
指令类型.ISUB_R,减法指令,0,64,64,0,dst = dst - src
指令类型.IXOR_R,异或指令,0,64,64,0,dst = dst ^ src
指令类型.IADD_RS,地址加法,8,64,64,0,dst = dst + (src << shift)
指令类型.IMUL_R,乘法指令,0,64,64,0,dst = dst * src
指令类型.IROR_C,循环右移,6,64,64,0,dst = dst >>> imm32
指令类型.IADD_C7,加法常数7,32,64,64,0,dst = dst + imm32 (7字节)
指令类型.IXOR_C7,异或常数7,32,64,64,0,dst = dst ^ imm32 (7字节)
指令类型.IADD_C8,加法常数8,32,64,64,0,dst = dst + imm32 (8字节)
指令类型.IXOR_C8,异或常数8,32,64,64,0,dst = dst ^ imm32 (8字节)
指令类型.IADD_C9,加法常数9,32,64,64,0,dst = dst + imm32 (9字节)
指令类型.IXOR_C9,异或常数9,32,64,64,0,dst = dst ^ imm32 (9字节)
指令类型.IMULH_R,高位乘法,0,64,128,0,dst = (dst * src) >> 64
指令类型.ISMULH_R,高位有符号乘法,0,64,128,0,dst = (dst * src) >> 64 (signed)
指令类型.IMUL_RCP,倒数乘法,32,64,96,64,dst = 2^x / imm32 * dst
解码配置.config0,4-8-4配置,0,128,128,0,16字节解码槽位
解码配置.config1,7-3-3-3配置,0,128,128,0,16字节解码槽位
解码配置.config2,3-7-3-3配置,0,128,128,0,16字节解码槽位
解码配置.config3,4-9-3配置,0,128,128,0,16字节解码槽位
解码配置.config4,4-4-4-4配置,0,128,128,0,16字节解码槽位
解码配置.config5,3-3-10配置,0,128,128,0,16字节解码槽位
宏操作.sub_rr,寄存器减法,0,24,24,0,3字节x86指令
宏操作.xor_rr,寄存器异或,0,24,24,0,3字节x86指令
宏操作.lea_sib,地址计算,0,32,32,0,4字节x86指令
宏操作.imul_rr,寄存器乘法,0,32,32,0,4字节x86指令
宏操作.ror_ri,立即数右移,0,32,32,0,4字节x86指令
宏操作.add_ri,立即数加法,0,56-72,56-72,0,7-9字节x86指令
宏操作.xor_ri,立即数异或,0,56-72,56-72,0,7-9字节x86指令
宏操作.mov_rr,寄存器传送,0,24,0,0,3字节x86指令(0延迟)
宏操作.mul_r,无符号乘法,0,24,32,0,3字节x86指令
宏操作.imul_r,有符号乘法,0,24,32,0,3字节x86指令
宏操作.mov_ri,立即数传送,0,80,32,0,10字节x86指令
微操作.P015,通用端口,0,0,0,0,可在P0/P1/P5执行
微操作.P01,双端口,0,0,0,0,可在P0/P1执行
微操作.P05,双端口,0,0,0,0,可在P0/P5执行
微操作.P1,乘法端口,0,0,0,0,仅在P1执行
微操作.P5,专用端口,0,0,0,0,仅在P5执行
性能指标.IPC,指令每周期,0,64,64,0,双精度浮点数
性能指标.cpuLatency,CPU延迟,0,32,32,0,模拟执行周期数
性能指标.asicLatency,ASIC延迟,0,32,32,0,硬件最优周期数
性能指标.codeSize,代码大小,0,32,32,0,机器码字节数
性能指标.macroOps,宏操作数,0,32,32,0,CPU微操作总数
性能指标.mulCount,乘法计数,0,32,32,0,乘法指令数量
性能指标.decodeCycles,解码周期,0,32,32,0,解码器周期数
倒数缓存.entry,缓存条目,32,64,64,64,单个倒数值
倒数缓存.total,完整缓存,1440,2880,2880,2880,45个倒数值(典型)
系统总计.单程序,单个程序生成,480,29000,995000,29000,包含所有中间状态
系统总计.8程序,完整系统,480,233600,7960000,233600,8个程序并行生成
优化版本.SIMD_Blake2,SIMD优化,480,512,512,512,256位向量化
优化版本.Compressed_Ports,端口压缩,1020,320,320,320,位压缩存储
优化版本.Packed_Registers,寄存器打包,832,256,256,256,位域优化
硬件实现.FPGA_LUT,FPGA逻辑,0,0,0,68000,8500个LUT×8位
硬件实现.FPGA_FF,FPGA触发器,0,0,0,16800,2100个FF×8位
硬件实现.FPGA_BRAM,FPGA内存,0,0,0,286720,35KB×8位
硬件实现.FPGA_DSP,FPGA数字信号,0,0,0,512,16个DSP×32位
硬件实现.ASIC_Area,ASIC面积,0,0,0,12800000,1.6mm²@28nm 